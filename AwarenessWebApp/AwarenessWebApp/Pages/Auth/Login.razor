@layout LoginLayout
@inject UserState UserState
@inject NavigationManager NavigationManager
@inject ILoginService loginService
@inject HttpClient HttpClient

@page "/"

<style>
    html, body {
        background-image: url("../img/login_background.jpg");
        background-position: center center;
        background-repeat: no-repeat;
        background-attachment: fixed;
        background-size: cover;
        font-family: 'Quicksand', sans-serif;
    }
</style>
<div class="body-login">
    <link href="https://fonts.googleapis.com/css2?family=Quicksand:wght@400&display=swap" rel="stylesheet">
    <center>
        <div class="card-holder">
            <div class="card col-lg-4 rounded-lg">
                <div>
                    <div class="d-flex justify-content-between bd-highlight mb-3">
                        <div class="p-2 bd-highlight"></div>
                        <div class="row col-8 p-2 bd-highlight">
                            <img src="./img/logo.png" class="img-fluid" />
                        </div>
                        <a class="btn btn-outline-warning btn-sm rounded-circle align-self-start p-2 bd-highlight btn-symmetric" href="aboutApplication">
                            <span class="oi oi-info" aria-hidden="true" data-toggle="tooltip" href="aboutApplication" title="Acerca del software"></span>
                        </a>
                    </div>
                    <hr />
                    <h3>Iniciar Sesión</h3>
                    <div style="padding: 10px;">
                        @if (!string.IsNullOrEmpty(responseOutput.msg))
                        {
                            <div class="alert alert-danger" role="alert">
                                @responseOutput.msg
                            </div>
                        }
                        <EditForm Model="authDTO">
                            <DataAnnotationsValidator />
                            <div class="form-group">
                                <label class="d-flex justify-content-start" for="inputUser">Usuario</label>
                                <InputText @bind-Value="authDTO.UserName" class="form-control" id="inputUser" placeholder="Nombre de usuario" />
                            </div>
                            <div class="form-group">
                                <label class="d-flex justify-content-start" for="inputPassword">Contraseña</label>
                                <InputText @bind-Value="authDTO.Password" class="form-control" id="inputPassword" type="password" placeholder="Contraseña" />
                            </div>
                            <div class="d-flex">
                                <div class="form-check mr-auto p-4">
                                    <input type="radio" class="form-check-input" id="exampleCheck1" />
                                    <label class="form-check-label" for="exampleCheck1">Recuerdame</label>
                                </div>
                                <div class="form-check p-4">
                                    <a href="/signup" class="link-primary">No tengo cuenta</a>
                                </div>
                            </div>
                            <button class="btn btn-outline-primary rounded-pill btn-block @disable_btn" type="submit" role="button" @onclick="loginAuthentication">@waitingMsg</button>
                        </EditForm>

                    </div>
                </div>
            </div>
        </div>
    </center>
</div>
@code {

    struct ResponseOutput
    {
        public string msg;
        public int statusCode;
    }

    private AuthDTO authDTO = new AuthDTO();
    private ResponseOutput responseOutput;
    private HttpResponseMessage response;
    private string waitingMsg = "Iniciar Sesión";
    private string disable_btn = "";


    private async Task loginAuthentication()
    {
        responseOutput.msg = null;
        waitingMsg = "Cargando...";
        disable_btn = "disabled";
        string user_username;
        var auth = JsonContent.Create(authDTO);
        var url = "https://authenticationserviceawareness.azurewebsites.net/api/authentications/auth";
        try
        {
            response = await HttpClient.PostAsync(url, auth);
            responseOutput.statusCode = (int)response.StatusCode;

            if (responseOutput.statusCode != 200)
            {
                //Invalid User
                responseOutput.msg = "Usuario o contraseña incorrectos";
            }
            else
            {
                UserState.UserName = authDTO.UserName;
                var url_medic = "https://databaseservicesawareness.azurewebsites.net/api/medics/" + UserState.UserName;
                HttpResponseMessage response_get = await HttpClient.GetAsync(url_medic);
                string response_body = await response_get.Content.ReadAsStringAsync();
                UserState.stringResponseJsonConvertMedic(response_body);
                await loginService.Login(await response.Content.ReadAsStringAsync(), UserState.LoggedMedic.MedicID, UserState.UserName);
                UserState.CurrentStep = "/enterPatientData";
                NavigationManager.NavigateTo("home");
            }
        }
        catch (HttpRequestException e)
        {
            Console.WriteLine(e);
        }
    }
    protected override void OnInitialized()
    {

        loginService.Logout();
        base.OnInitialized();
    }
}