@layout LoginLayout
@inject HttpClient HttpClient
@inject ILoginService loginService
@inject UserState UserState
@inject NavigationManager NavigationManager

@page "/signup"

<style>
    html, body {
        background-image: url("../img/login_background.jpg");
        background-position: center center;
        background-repeat: no-repeat;
        background-attachment: fixed;
        background-size: cover;
        font-family: 'Quicksand', sans-serif;
    }
    .error-text{
        text-align:left;
        color: red;
    }
</style>

<link href="https://fonts.googleapis.com/css2?family=Quicksand:wght@400&display=swap" rel="stylesheet">
<center>
    <div class="card-holder">
        <div class="card col-lg-4 rounded-lg">
            <div>
                <div class="d-flex justify-content-between bd-highlight mb-3">
                    <div class="p-2 bd-highlight"></div>
                    <div class="row col-8 p-2 bd-highlight">
                        <img src="./img/logo.png" class="img-fluid" />
                    </div>
                    <a class="btn btn-outline-warning btn-sm rounded-circle align-self-start p-2 bd-highlight btn-symmetric" href="aboutApplication">
                        <span class="oi oi-info" aria-hidden="true" data-toggle="tooltip" href="aboutApplication" title="Acerca del software"></span>
                    </a>
                </div>
                <hr />

                <h3>Registrarse</h3>
                <div style="padding: 10px;">
                    <EditForm Model="medicSignUpDTO">
                        <DataAnnotationsValidator />
                        <div class="form-row">
                            <div class="col-md-6 form-group">
                                <label class="d-flex justify-content-start" for="inputFirstName">Nombres</label>
                                <InputText @bind-Value="medicSignUpDTO.FirstName" class="form-control" id="inputFirstName" placeholder="Nombres" />
                            </div>
                            <div class="col-md-6 form-group">
                                <label class="d-flex justify-content-start" for="inputLastName">Apellidos</label>
                                <InputText @bind-Value="medicSignUpDTO.LastName" class="form-control" id="inputLastName" placeholder="Apellidos" />
                            </div>
                        </div>

                        <div class="form-group">
                            <label class="d-flex justify-content-start" for="inputUser">Usuario</label>
                            <InputText @bind-Value="medicSignUpDTO.Authentication.UserName" class="form-control" id="inputUserName" placeholder="Nombre de usuario" />
                        </div>
                        <div class="form-group">
                            <label class="d-flex justify-content-start" for="inputPassword">Contraseña</label>
                            <InputText @bind-Value="medicSignUpDTO.Authentication.Password" class="form-control" type="password" id="inputPassword" placeholder="Contraseña" />
                        </div>
                        <div class="form-group">
                            <label class="d-flex justify-content-start" for="inputPasswordConfirm">Confirmar Contraseña</label>
                            <InputText @bind-Value="pass_match" class="form-control" type="password" id="inputPasswordConfirm" placeholder="Confirmar contraseña" />
                            @if (!string.IsNullOrEmpty(medicSignUpDTO.Authentication.Password) && medicSignUpDTO.Authentication.Password != pass_match)
                            {
                                <label class="error-text">Las contraseñas no coinciden</label>
                            }
                        </div>
                        <div class="form-row">
                            <div class="col-md-6 form-group">
                                <label class="d-flex justify-content-start" for="inputUser">Fecha de Nacimiento</label>
                                <InputDate @bind-Value="medicSignUpDTO.BirthDate" class="form-control" id="inputBirthDate" placeholder="Fecha Nacimiento" />
                            </div>
                            <div class="col-md-6 form-group">
                                <label class="d-flex justify-content-start" for="inputSemester">Semestre</label>
                                <InputNumber @bind-Value="medicSignUpDTO.Semester" class="form-control" id="inputSemester" placeholder="Semestre" />
                            </div>

                        </div>
                        <div class="form-row">
                            <div class="col-md-6 dropdown show">
                                <label class="d-flex justify-content-start" for="inputRotation">Rotación</label>
                                <InputText @bind-Value="medicSignUpDTO.Rotation" class="form-control" id="inputRotation" placeholder="Rotación" />
                            </div>
                        </div>
                        <div class="d-flex">
                            <div class="form-check mr-auto p-4">
                                <input type="radio" class="form-check-input" id="exampleCheck1">
                                <label class="form-check-label" for="exampleCheck1">Recuerdame</label>
                            </div>
                            <div class="form-check p-4">
                                <a href="" class="link-primary">O inicia sesión</a>
                            </div>
                        </div>
                        @if (!string.IsNullOrEmpty(responseOutput.msg))
                        {
                            <div class="alert alert-danger" role="alert">
                                @responseOutput.msg
                            </div>
                        }
                        <button class="btn btn-outline-primary rounded-pill btn-block @disable_btn" role="button" @onclick="singUpAuthentication">@waitingMsg</button>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
</center>
@code {
    struct ResponseOutput
    {
        public string msg;
        public int statusCode;
    }

    private MedicSignUpDTO medicSignUpDTO = new();
    private ResponseOutput responseOutput;
    private HttpResponseMessage response;
    private string pass_match;
    private string waitingMsg = "Registrarse";
    private string disable_btn = "";

    private async Task singUpAuthentication()
    {
        if (medicSignUpDTO.Authentication.Password == pass_match)
        {
            waitingMsg = "Cargando...";
            disable_btn = "disabled";
            medicSignUpDTO.FirstName = medicSignUpDTO.FirstName + " ";
            medicSignUpDTO.LastName = medicSignUpDTO.LastName + " ";
            var auth = JsonContent.Create(medicSignUpDTO);
            var url = "https://authenticationserviceawareness.azurewebsites.net/api/authentications/signup";
            try
            {
                response = await HttpClient.PostAsync(url, auth);
                responseOutput.statusCode = (int)response.StatusCode;

                if(responseOutput.statusCode == 409)
                {
                    responseOutput.msg = "El nombre de usuario ya está en uso";
                    waitingMsg = "Registrarse";
                    disable_btn = "";
                }
                else if (responseOutput.statusCode != 200)
                {
                    //Invalid User
                    responseOutput.msg = "Datos incorrectos";
                }
                else
                {

                    UserState.UserName = medicSignUpDTO.Authentication.UserName;
                    var url_medic = "https://databaseservicesawareness.azurewebsites.net/api/medics/" + UserState.UserName;
                    HttpResponseMessage response_get = await HttpClient.GetAsync(url_medic);
                    string response_body = await response_get.Content.ReadAsStringAsync();
                    UserState.stringResponseJsonConvertMedic(response_body);
                    await loginService.Login(await response.Content.ReadAsStringAsync(), UserState.LoggedMedic.MedicID, UserState.UserName);
                    NavigationManager.NavigateTo("home");
                }
            }
            catch (HttpRequestException e)
            {
                Console.WriteLine(e);
            }
        }
    }
}
