@layout MainLayout
@page "/beginProcedure"
@inject UserState UserState
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager

<style>

    .shape-button {
        display: table-cell;
        background: #6368B0;
        width: 28rem;
        height: 28rem;
        border-radius: 23% 77% 65% 35% / 30% 44% 56% 70%;
        margin: 0 auto;
        vertical-align: middle;
    }

    .shape-button-invert {
        display: table-cell;
        background: #ffffff;
        width: 28rem;
        height: 28rem;
        border-radius: 23% 77% 65% 35% / 30% 44% 56% 70%;
        margin: 0 auto;
        vertical-align: middle;
        transform: rotateY(180deg);
    }

        .shape-button-invert:hover {
            background: #C2E0B1;
        }

    .xl-icon {
        transform: rotateY(180deg);
        vertical-align: middle;
        font-size: 10rem;
        color: #6368B0;
    }

    h1 {
        transform: rotateY(180deg);
        font-size: 2rem;
        color: #6368B0;
    }
    .error-text {
        text-align: left;
        color: red;
    }
</style>
<AuthorizeView>
    <Authorized>


        <div class="container">
            <div class="row">
                <div class="col-xl-5 my-auto">
                    <div class="procedureSteps">
                        <ProcedureSteps />
                    </div>
                </div>

                <div class="col-xl-7 my-auto">
                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <h6 style="text-align: center;" class="error-text"> @errorMessage</h6>
                        <div class="col-md-6">
                            <button class="btn btn-success btn-lg btn-block" @onclick="confirmBeginProcedure">Volver a intentar</button>
                        </div>
                    }
                    else {
                        @if (disabled == true)
                        {
                            <div class="shape-button">
                                <div class="shape-button-invert" @onclick="beginProcedureBtn">
                                    <center>
                                        <span class="oi oi-media-play xl-icon" aria-hidden="true" data-toggle="tooltip" title="Iniciar "></span>
                                        <br />
                                        <h1>Iniciar Procedimiento</h1>
                                    </center>
                                </div>
                            </div>
                        }
                        else
                        {
                            <h2 style="text-align: center;">¿Está seguro de iniciar el procedimiento?</h2>
                            <h6 style="text-align: center;">Verifique que tiene todo lo necesario para poder realizar el procedimiento</h6>
                            <div class="d-flex justify-content-around bd-highlight">
                                <button class="btn btn-success p-2 bd-highlight" @onclick="confirmBeginProcedure">Continuar</button>
                                <div class="btn btn-danger p-2 bd-highlight" @onclick="cancelBeginProcedure">Cancelar</div>
                            </div>
                        }
                    }
                </div>
            </div>
        </div>
    </Authorized>
</AuthorizeView>
@code {
    private bool disabled = true;
    private string errorMessage;
    HttpResponseMessage response_hololens;
    HttpResponseMessage response_monitor;

    private void beginProcedureBtn()
    {
        disabled = false;
    }
    private async void confirmBeginProcedure()
    {
        var url_hololens = "https://hololenscommunicationserviceawareness.azurewebsites.net/api/hololens-communication-service/set-procedure-data?IdProcedure=" + UserState.CurrentProcedureDTO.ProcedureID;
        var url_monitor = "https://awarenessmonitorscomunication.azurewebsites.net/connect";
        try
        {
            response_hololens = await HttpClient.PostAsync(url_hololens, null);
            response_monitor = await HttpClient.GetAsync(url_monitor);
            var response_str_hololens = await response_hololens.Content.ReadAsStringAsync();
            var response_str_monitor = await response_monitor.Content.ReadAsStringAsync();

            if (!string.IsNullOrEmpty(response_str_hololens)) {
                if (!response_hololens.IsSuccessStatusCode || !response_str_hololens.Equals(UserState.CurrentProcedureDTO.ProcedureID.ToString()))
                {
                    errorMessage = "Error al conectar con las gafas, vuelva a intentarlo Codigo de error: "+response_hololens.ReasonPhrase;
                    Console.WriteLine($"There was an error! {errorMessage}");
                    StateHasChanged();
                    return;
                }
            }
            if (!string.IsNullOrEmpty(response_str_monitor))
            {
                if (!response_monitor.IsSuccessStatusCode)
                {
                    errorMessage = "Error al conectar con el monitor, verfique que se halla terminado el procedimiento desde las gafas Codigo de error: " + response_monitor.ReasonPhrase;
                    Console.WriteLine($"There was an error! {errorMessage}");
                    StateHasChanged();
                    return;
                }
            }
            UserState.onlyCurrentStep(5);
            NavigationManager.NavigateTo("/inProgressProcedure");
        }
        catch (HttpRequestException e)
        {
            Console.WriteLine(e);
        }
    }
    private void cancelBeginProcedure()
    {
        disabled = true;
    }
    protected override Task OnInitializedAsync()
    {
        if (UserState.ProcedureSteps[4].active != "active")
        {
            NavigationManager.NavigateTo("/enterPatientData");
        }
        return base.OnInitializedAsync();
    }
}
