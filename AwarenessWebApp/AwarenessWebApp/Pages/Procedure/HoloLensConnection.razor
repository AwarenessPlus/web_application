@layout MainLayout
@page "/hololensConnection"
@inject UserState UserState
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager

<style>
    .shape-button {
        display: table-cell;
        background: #6368B0;
        width: 28rem;
        height: 28rem;
        border-radius: 23% 77% 65% 35% / 30% 44% 56% 70%;
        margin: 0 auto;
        vertical-align: middle;
    }

    .shape-button-invert {
        display: table-cell;
        background: #ffffff;
        width: 28rem;
        height: 28rem;
        border-radius: 23% 77% 65% 35% / 30% 44% 56% 70%;
        margin: 0 auto;
        vertical-align: middle;
        transform: rotateY(180deg);
    }

        .shape-button-invert:hover {
            background: #C2E0B1;
        }

    .xl-icon {
        transform: rotateY(180deg);
        vertical-align: middle;
        font-size: 10rem;
        color: #6368B0;
    }

    h1 {
        transform: rotateY(180deg);
        font-size: 2rem;
        color: #6368B0;
    }

    .center {
        margin: auto;
        width: 50%;
        padding: 10px;
    }
    .error-text {
        text-align: left;
        color: red;
    }
</style>
<AuthorizeView>
    <Authorized>
        <div class="container">
            <div class="row">
                <div class="col-lg-5 my-auto">
                    <div class="procedureSteps">
                        <ProcedureSteps />
                    </div>
                </div>
                <div class="col-lg-7 my-auto">
                    @if (holoLensServiceStatus == "enabled")
                    {
                        @if (holoLensStatus == "disconnected")
                        {
                            <div class="shape-button">
                                <div class="shape-button-invert" @onclick="testHoloLensConnection">
                                    <center>
                                        <span class="oi oi-wifi xl-icon" aria-hidden="true" data-toggle="tooltip" title="Probar Conexión HoloLens"></span>
                                        <br />
                                        <h1>Probar Conexión con HoloLens®</h1>
                                    </center>
                                </div>
                            </div>
                        }
                        else if (holoLensStatus == "connecting")
                        {
                            <img src="./img/loadingButton-unscreen.gif" class="img-fluid center" />
                        }
                        else if (holoLensStatus == "connected")
                        {
                            <img src="./img/check.png" class="img-fluid center" />
                            <br />
                            <div class="col-md-6">
                                <button class="btn btn-success btn-lg btn-block" @onclick="continueNextStep">Continuar</button>
                            </div>
                        }

                    }
                    @if (string.IsNullOrEmpty(holoLensServiceStatus))
                    {
                        <h2>Cargando...</h2>
                    }
                    @if (holoLensServiceStatus == "disabled")
                    {
                        <h2 class="error-text">Error en el acceso al servicio de conexión con HoloLens</h2>
                        <div class="col-md-6">
                            <button class="btn btn-success btn-lg btn-block" @onclick="testHoloLensConnection">Volver a intentar</button>
                        </div>
                    }
                </div>
            </div>
        </div>
    </Authorized>
</AuthorizeView>

@code {
    private string holoLensStatus = "disconnected";
    private string holoLensServiceStatus;
    private string errorMessage;

    private async void testHoloLensConnection()
    {
        holoLensStatus = "connecting";
        var url = UserState.Url_hololens_service + "/hololens-connection-status";
        try
        {
            HttpResponseMessage response_get = await HttpClient.GetAsync(url);
            if (response_get.IsSuccessStatusCode)
            {
                var response_str = await response_get.Content.ReadAsStringAsync();
                if (!string.IsNullOrEmpty(response_str) && response_str.Equals("true"))
                {
                    response_str = "suputamadres";
                    holoLensServiceStatus = "enabled";
                    holoLensStatus = "connected";
                    StateHasChanged();
                }
                else
                {
                    holoLensServiceStatus = "disabled";
                    StateHasChanged();
                }
            }
            else
            {
                errorMessage = response_get.ReasonPhrase;
                Console.WriteLine($"There was an error! {errorMessage}");
                return;
            }
        }
        catch (HttpRequestException e)
        {
            Console.WriteLine(e);
        }
    }

    protected override async Task OnInitializedAsync()
    {

        if (UserState.ProcedureSteps[3].active != "active")
        {
            NavigationManager.NavigateTo("/enterPatientData");
        }


        var url = UserState.Url_hololens_service + "/health-status";
        try
        {
            HttpResponseMessage response_get = await HttpClient.GetAsync(url);
            if (response_get.IsSuccessStatusCode)
            {
                holoLensServiceStatus = "enabled";
            }
            else
            {
                holoLensServiceStatus = "disabled";
                errorMessage = response_get.ReasonPhrase;
                Console.WriteLine($"There was an error! {errorMessage}");
            }
        }
        catch (HttpRequestException e)
        {
            Console.WriteLine(e);
        }
    }
    private void continueNextStep()
    {
        //Set active procedure step
        UserState.onlyCurrentStep(4);
        NavigationManager.NavigateTo("/beginProcedure");
    }
}
