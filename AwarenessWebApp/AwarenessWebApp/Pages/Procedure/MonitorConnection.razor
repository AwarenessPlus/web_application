@layout MainLayout
@page "/monitorConnection"
@inject UserState UserState
@inject HttpClient HttpClient

<style>

    .shape-button {
        display: table-cell;
        background: #6368B0;
        width: 28rem;
        height: 28rem;
        border-radius: 23% 77% 65% 35% / 30% 44% 56% 70%;
        margin: 0 auto;
        vertical-align: middle;
    }

    .shape-button-invert {
        display: table-cell;
        background: #ffffff;
        width: 28rem;
        height: 28rem;
        border-radius: 23% 77% 65% 35% / 30% 44% 56% 70%;
        margin: 0 auto;
        vertical-align: middle;
        transform: rotateY(180deg);
    }

        .shape-button-invert:hover {
            background: #C2E0B1;
        }

    .xl-icon {
        transform: rotateY(180deg);
        vertical-align: middle;
        font-size: 10rem;
        color: #6368B0;
    }

    h1 {
        transform: rotateY(180deg);
        font-size: 2rem;
        color: #6368B0;
        padding-top: 2rem;
    }
    .center {
        margin: auto;
        width: 50%;
        padding: 10px;
    }
</style>

<div class="container">
    <div class="row">
        <div class="col-xl-5 my-auto">
            <div class="procedureSteps">
                <ProcedureSteps />
            </div>
        </div>
        <div class="col-xl-7 my-auto">
            @if (monitorStatus == "disconnected")
            {
                <div class="shape-button">
                    <div class="shape-button-invert" @onclick="monitorConnection">
                        <center>
                            <span class="oi oi-monitor xl-icon" aria-hidden="true" data-toggle="tooltip" title="Conectar Monitor"></span>
                            <br />
                            <h1>Conectar Monitor</h1>
                        </center>
                    </div>
                </div>
            }
            else if (monitorStatus == "connecting")
            {
                <img src="./img/loadingButton-unscreen.gif" class="img-fluid center" />
            }
            else if (monitorStatus == "connected")
            {
                <img src="./img/check.png" class="img-fluid center" />
                <br />
                <!--<a class="btn btn-warning btn-lg btn-block" @onclick="disconnectMonitor">Desconectar Monitor</a> -->
            }
            else
            {
                <!--
                <h2 style="text-align: center;"> ¿Seguro desea desconectar el monitor?</h2>
                <div class="d-flex justify-content-around bd-highlight">
                    <a class="btn btn-success p-2 bd-highlight" @onclick="confirmDisconnectMonitor"> Si</a>
                    <div class="btn btn-danger p-2 bd-highlight" @onclick="cancelDisconnectMonitor"> No</div>
                </div>-->
            }

        </div>
    </div>
</div>


@code {
    private string monitorStatus = "disconnected";
    private string errorMessage;
    private async void monitorConnection()
    {
        monitorStatus = "connecting";
        var url = "https://hololenscommunicationserviceawareness.azurewebsites.net/api/hololens-communication-service/hololens-connection-status";
        HttpResponseMessage response_get = await HttpClient.GetAsync(url);
        if (response_get.IsSuccessStatusCode)
        {
            monitorStatus = "connected";
        }
        else
        {
            errorMessage = response_get.ReasonPhrase;
            Console.WriteLine($"There was an error! {errorMessage}");
            return;
        }
    }
    private void disconnectMonitor()
    {
        monitorStatus = "confirmDisconnect";

    }
    private void confirmDisconnectMonitor()
    {
        monitorStatus = "disconnected";

    }
    private void cancelDisconnectMonitor()
    {
        monitorStatus = "connected";
    }
    protected override Task OnInitializedAsync()
    {
        //Set active procedure step
        UserState.nextStepActive(2);

        return base.OnInitializedAsync();
    }
}
